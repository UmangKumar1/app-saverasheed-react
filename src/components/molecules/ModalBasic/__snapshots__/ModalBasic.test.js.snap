// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ModalBasic renders children when passed in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ModalBasic>
    children
  </ModalBasic>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <ClickAwayListener
        mouseEvent="onMouseUp"
        onClickAway={[Function]}
        touchEvent="onTouchEnd"
      >
        <Styled(div)>
          <Styled(div)>
            children
          </Styled(div)>
        </Styled(div)>
      </ClickAwayListener>,
      "className": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Styled(div)>
          <Styled(div)>
            children
          </Styled(div)>
        </Styled(div)>,
        "mouseEvent": "onMouseUp",
        "onClickAway": [Function],
        "touchEvent": "onTouchEnd",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Styled(div)>
            children
          </Styled(div)>,
          "className": undefined,
          "onClick": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "children",
            "className": undefined,
          },
          "ref": null,
          "rendered": "children",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <ClickAwayListener
          mouseEvent="onMouseUp"
          onClickAway={[Function]}
          touchEvent="onTouchEnd"
        >
          <Styled(div)>
            <Styled(div)>
              children
            </Styled(div)>
          </Styled(div)>
        </ClickAwayListener>,
        "className": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Styled(div)>
            <Styled(div)>
              children
            </Styled(div)>
          </Styled(div)>,
          "mouseEvent": "onMouseUp",
          "onClickAway": [Function],
          "touchEvent": "onTouchEnd",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(div)>
              children
            </Styled(div)>,
            "className": undefined,
            "onClick": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "children",
              "className": undefined,
            },
            "ref": null,
            "rendered": "children",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
